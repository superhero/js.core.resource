{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2018-09-13T10:14:13.373Z",
    "end": "2018-09-13T10:14:13.429Z",
    "duration": 56,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "719309fc-0b84-44e4-8c28-058f05392b18",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e290a181-d8ec-4b45-8068-bb4550cbba93",
        "title": "resource dispatcher integration tests",
        "fullFile": "/home/erik/Projects/@superhero/js.core.resource/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "resource dispatcher integration tests \"before all\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"endpoint\": \"index\",\n      \"policy\": {},\n      \"args\": {}\n    }\n  ]\n}",
            "code": "require.main.filename = __filename\ncontext(this, { title:'routes', value:config.routes })\nserver = core.server('http', config.routes, { debug:false })\nserver.on('listening', () => done())\nserver.listen(9001)",
            "err": {},
            "isRoot": false,
            "uuid": "ef4a9733-066f-4329-ad9f-610cf0278216",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "resource dispatcher integration tests \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "f40bd1bd-8cfa-4857-944c-3ae031b0116f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "404 status response",
            "fullTitle": "resource dispatcher integration tests 404 status response",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/none-existent.url')\nexpect(file.status).to.be.equal(404)",
            "err": {},
            "isRoot": false,
            "uuid": "4514fd7b-75e4-4419-bf5b-0f9e5ab48708",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "jpg content-type header",
            "fullTitle": "resource dispatcher integration tests jpg content-type header",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.jpg')\nexpect(file.headers['content-type']).to.be.equal('image/jpeg')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "534174d4-1324-4c39-9388-a806d4821ca2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "gif content-type header",
            "fullTitle": "resource dispatcher integration tests gif content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.gif')\nexpect(file.headers['content-type']).to.be.equal('image/gif')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "aa8df753-1a22-4ab4-9757-e084afdf0c7f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "png content-type header",
            "fullTitle": "resource dispatcher integration tests png content-type header",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.png')\nexpect(file.headers['content-type']).to.be.equal('image/png')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "230bd497-c1bf-45d5-bcb4-53a9195445c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "ico content-type header",
            "fullTitle": "resource dispatcher integration tests ico content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.ico')\nexpect(file.headers['content-type']).to.be.equal('image/vnd.microsoft.icon')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "a3069cd6-073c-4ce6-8659-6a480934a92f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "css content-type header",
            "fullTitle": "resource dispatcher integration tests css content-type header",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.css')\nexpect(file.headers['content-type']).to.be.equal('text/css')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "3485a487-6f4e-4792-8623-3fdab60bdad4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "csv content-type header",
            "fullTitle": "resource dispatcher integration tests csv content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.csv')\nexpect(file.headers['content-type']).to.be.equal('text/csv')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "37b33021-c0c0-4630-a9f9-efede203911c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "pdf content-type header",
            "fullTitle": "resource dispatcher integration tests pdf content-type header",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.pdf')\nexpect(file.headers['content-type']).to.be.equal('application/pdf')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "5a88ee06-a33f-460e-a4d4-b3d910584d46",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "json content-type header",
            "fullTitle": "resource dispatcher integration tests json content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.json')\nexpect(file.headers['content-type']).to.be.equal('application/json')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "d223d6e8-ed2f-4868-8996-4c9c370bb437",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "js content-type header",
            "fullTitle": "resource dispatcher integration tests js content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.js')\nexpect(file.headers['content-type']).to.be.equal('application/javascript')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "6534f3d6-cc47-4b05-8642-98375fa2c65a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4514fd7b-75e4-4419-bf5b-0f9e5ab48708",
          "534174d4-1324-4c39-9388-a806d4821ca2",
          "aa8df753-1a22-4ab4-9757-e084afdf0c7f",
          "230bd497-c1bf-45d5-bcb4-53a9195445c4",
          "a3069cd6-073c-4ce6-8659-6a480934a92f",
          "3485a487-6f4e-4792-8623-3fdab60bdad4",
          "37b33021-c0c0-4630-a9f9-efede203911c",
          "5a88ee06-a33f-460e-a4d4-b3d910584d46",
          "d223d6e8-ed2f-4868-8996-4c9c370bb437",
          "6534f3d6-cc47-4b05-8642-98375fa2c65a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 39,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}