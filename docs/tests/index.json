{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2018-07-27T16:15:54.045Z",
    "end": "2018-07-27T16:15:54.100Z",
    "duration": 55,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d4280b91-6dbe-4601-b9e0-90f45a026b4d",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "5b28a152-1365-4b8d-8e9d-18e968730bcf",
        "title": "resource dispatcher integration tests",
        "fullFile": "/home/erik/Projects/@superhero/js.core.resource/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "resource dispatcher integration tests \"before all\" hook",
            "timedOut": false,
            "duration": 9,
            "pass": false,
            "fail": false,
            "pending": false,
            "context": "{\n  \"title\": \"routes\",\n  \"value\": [\n    {\n      \"endpoint\": \"index\",\n      \"policy\": {},\n      \"args\": {}\n    }\n  ]\n}",
            "code": "require.main.filename = __filename\ncontext(this, { title:'routes', value:config.routes })\nserver = core.server('http', config.routes, { debug:false })\nserver.on('listening', () => done())\nserver.listen(9001)",
            "err": {},
            "isRoot": false,
            "uuid": "835e0203-8a4f-4e47-8aa4-7a4531d02cf3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "resource dispatcher integration tests \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.close()",
            "err": {},
            "isRoot": false,
            "uuid": "8e05a92d-b696-4174-abf0-9fa77407a2a7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "404 status response",
            "fullTitle": "resource dispatcher integration tests 404 status response",
            "timedOut": false,
            "duration": 14,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/none-existent.url')\nexpect(file.status).to.be.equal(404)",
            "err": {},
            "isRoot": false,
            "uuid": "4f5aaf47-db0e-4121-8da5-984d9c9aaa1d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "jpg content-type header",
            "fullTitle": "resource dispatcher integration tests jpg content-type header",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.jpg')\nexpect(file.headers['content-type']).to.be.equal('image/jpeg')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "02669ee4-9d24-409b-b878-7015a49525d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "gif content-type header",
            "fullTitle": "resource dispatcher integration tests gif content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.gif')\nexpect(file.headers['content-type']).to.be.equal('image/gif')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "18446bf5-18b7-4fa7-a4a5-a0c7df5c6bbc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "png content-type header",
            "fullTitle": "resource dispatcher integration tests png content-type header",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.png')\nexpect(file.headers['content-type']).to.be.equal('image/png')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "99b45647-5558-428b-815b-8020c70383ba",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "ico content-type header",
            "fullTitle": "resource dispatcher integration tests ico content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.ico')\nexpect(file.headers['content-type']).to.be.equal('image/vnd.microsoft.icon')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "f93244c3-f91d-428b-bf24-d894b91324ff",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "css content-type header",
            "fullTitle": "resource dispatcher integration tests css content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.css')\nexpect(file.headers['content-type']).to.be.equal('text/css')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "c06608d5-d88d-42d6-a1fd-8bbd86f7054c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "csv content-type header",
            "fullTitle": "resource dispatcher integration tests csv content-type header",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.csv')\nexpect(file.headers['content-type']).to.be.equal('text/csv')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "3bacff6a-a235-4eb2-bcd0-43ce5897b86b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "pdf content-type header",
            "fullTitle": "resource dispatcher integration tests pdf content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.pdf')\nexpect(file.headers['content-type']).to.be.equal('application/pdf')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "6b96c522-b742-4485-9984-a3db6de6da31",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "json content-type header",
            "fullTitle": "resource dispatcher integration tests json content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.json')\nexpect(file.headers['content-type']).to.be.equal('application/json')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "227ec9d7-400a-4aad-8ac1-4a9ecc7d991b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "js content-type header",
            "fullTitle": "resource dispatcher integration tests js content-type header",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const file = await request.get('/file.js')\nexpect(file.headers['content-type']).to.be.equal('application/javascript')\nexpect(file.status).to.be.equal(200)",
            "err": {},
            "isRoot": false,
            "uuid": "32d47651-191f-44e6-bdd4-1b9cbab19e59",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "4f5aaf47-db0e-4121-8da5-984d9c9aaa1d",
          "02669ee4-9d24-409b-b878-7015a49525d8",
          "18446bf5-18b7-4fa7-a4a5-a0c7df5c6bbc",
          "99b45647-5558-428b-815b-8020c70383ba",
          "f93244c3-f91d-428b-bf24-d894b91324ff",
          "c06608d5-d88d-42d6-a1fd-8bbd86f7054c",
          "3bacff6a-a235-4eb2-bcd0-43ce5897b86b",
          "6b96c522-b742-4485-9984-a3db6de6da31",
          "227ec9d7-400a-4aad-8ac1-4a9ecc7d991b",
          "32d47651-191f-44e6-bdd4-1b9cbab19e59"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 37,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}